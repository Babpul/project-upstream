void mycpto (const char* source_file, const char* dest_file  )
{
    FILE *ofp;
    FILE *myfs;
    int c,d;
    int test = 0;
    int i = 0;
    int inode = 1;
    int tmp_datablock;

    if(source_file ==NULL || dest_file == NULL)
    {
        printf("오류 : 인자가 부족합니다");
        return;
    }

    myfs = fopen("myfs", "rb");
    if ((ofp = fopen(dest_file, "wb")) == NULL))
    {
        printf("오류 : 열지 못했습니다.");
        return;
    }

    //현재 디렉터리의 아이노드 받기
    int presentinode = rear_dir_list_ptr-> inode; //현재 디렉터리의 아이노드번호
    INODE *presenti_data = (INODE *)malloc(sizeof(INODE)); //현재 디렉터리의 아이노드 구조체
    INODE *file_inode_tmp_ptr = (INODE *)malloc(sizeof(INODE));//받아올 파일의 아이노드 구조체
    fseek(myfs, BOOT_BLOCK_SIZE + SUPER_BLOCK_SIZE + 20*(presentinode - 1), SEEK_SET);
    fread(presenti_data, sizeof(INODE), 1, myfs);
    //함수인자의 파일명과 데이터블록의 파일명 비교
    int n = presenti_data-> size/12; //for문을 위한 변수지정
    char *filename = (char *)malloc(sizeof(char) * 8); //파일명을 읽기위한 변수
    int *fileinode = (int *)malloc(sizeof(int));
    fseek(myfs, BOOT_BLOCK_SIZE + SUPER_BLOCK_SIZE + INODE_LIST_SIZE + (DATA_BLOCK_SIZE * (presenti_data-> dir_1)), SEEK_SET);
    unsigned count;
    int none_tmp = 0;
    for(int i=0; i<n; i++)
    {
        fread(filename, 8, 1, myfs);
        fread(fileinode, sizeof(int), 1, myfs);
        if(strcmp(source_file, filename) == 0)
        {
            count = i;
            break;
        }
        else
        {
            none_tmp++;
        }
    }
    if (none_tmp == n) //해당 이름의 파일이 존재하지 않는 경우
    {
        printf("해당 이름의 파일이 존재하지 않습니다.\n");

        return;
    }
    else //해당 이름의 파일이 존재하는 경우
    {
        //해당 파일이 일반 파일인지 검사
        fseek(myfs, BOOT_BLOCK_SIZE + SUPER_BLOCK_SIZE + sizeof(INODE) * (*fileinode - 1), SEEK_SET);
        fread(file_inode_tmp_ptr, sizeof(INODE), 1, myfs);
        if (file_inode_tmp_ptr->type == 0) //해당 파일이 디렉터리인 경우
        {
            printf("해당 파일은 일반 파일이 아닙니다.\n");
            free(presenti_data);
            free(filename);
            return;
        }
    }
    fseek(myfs, BOOT_BLOCK_SIZE+SUPER_BLOCK_SIZE+(sizeof(INODE)*128)+(DATA_BLOCK_SIZE*((file_inode_tmp_ptr -> dir_1))),SEEK_SET);//복사할 파일에 이동
    while((d = getc(myfs))!=EOF)
    {
        putc(d,ofp);
    }
    
    free(file_inode_tmp_ptr);
    free(fileinode);
    fclose(ofp);
    fclose(myfs);

    return;
}